---
layout: layouts/base.njk
showMaps: true
---

<!-- Bloc containing the map -->
<div id="map">
    <aside id="map-selection" 
           class="map-panel" 
           aria-labelledby="panel-title">
        <button id="open-panel-btn" 
                class="fr-btn fr-btn--icon-left fr-icon-eye-line map-panel-toggle" 
                aria-label="Ouvrir le panneau de sélection des cartes"
                aria-controls="control-panel"
                aria-expanded="true">
            Afficher les cartes
        </button>
        <div class="map-panel--extended">
            <div class="map-panel__header">
                <button class="fr-btn--close fr-btn" 
                        aria-label="Fermer le panneau de sélection des cartes"
                        aria-controls="control-panel">
                    Fermer
                </button>
            </div>
            <div class="map-panel__content">
                <h2 id="panel-title" class="fr-h5">Cartes</h2>
                {% if mapStyles and mapStyles.styles %}
                    {% for style in mapStyles.styles %}
                    <div class="map-card" data-style-url="{{ style.url }}">
                        <div class="map-card__header">
                            <div class="map-card__img">   
                                <img src="{{ style.thumbnail }}" class="fr-responsive-img" alt="Aperçu de {{ style.title }}" />
                            </div>
                            <ul class="fr-badges-group">
                                <li>
                                    {% if style.isDefault %}
                                    <p class="fr-badge fr-badge--sm fr-badge--success">Affichée actuellement</p>
                                    {% endif %}
                                </li>
                            </ul>
                        </div>
                        <div class="map-card__content">
                            <h3 class="map-card__title">{{ style.title }}</h3>
                            <p class="map-card__desc">{{ style.description }}</p>
                        </div>
                    </div>
                    {% endfor %}
                {% else %}
                    <p>No map styles available</p>
                {% endif %}
            </div>
        </div>
    </aside>
    {# <div class="map-panel">
        <p id="zoom-level"></p>
    </div> #}
</div>
<script>
    // add the PMTiles plugin to the maplibregl global. setting metadata = true fills out the "attribution" field of the
    // source, and is required for some inspector applications, but requires an additional blocking HTTP request before
    // loading the map.
    let protocol = new pmtiles.Protocol({metadata: true});
    maplibregl.addProtocol("pmtiles", protocol.tile);
    // Map initialization with default style
    const defaultStyle = 'https://betagouv.github.io/styles-de-cartes/maps/map_simplified_colored_ign.json';
    const map = new maplibregl.Map({
        container: 'map', 
        style: {% if mapStyles and mapStyles.styles %}
            {% set defaultStyle = mapStyles.styles | find("isDefault", true) %}
            {% if defaultStyle %}'{{ defaultStyle.url }}'{% else %}defaultStyle{% endif %}
        {% else %}defaultStyle{% endif %},
        maxZoom: 18.9,
    });

    map.addControl(new maplibregl.NavigationControl());
    // Référence au div pour afficher le niveau de zoom
    //const zoomLevelDiv = document.getElementById('zoom-level');
    // Fonction pour mettre à jour le niveau de zoom affiché
    {# function updateZoomLevel() {
        const zoom = map.getZoom().toFixed(2); // Obtenir le zoom actuel, arrondi à 2 décimales
        zoomLevelDiv.innerText = `Zoom : ${zoom}`;
    } #}
    // Mettre à jour le niveau de zoom au chargement de la carte
    // map.on('load', updateZoomLevel);
    // Écouter les changements de zoom
    // map.on('zoom', updateZoomLevel);
    // Sélection du menu déroulant pour changer de style
    //const styleSelector = document.getElementById('style-selector');
    // Function to fetch and display style metadata
    {# async function displayStyleMetadata(styleUrl) {
        try {
            const response = await fetch(styleUrl);
            const styleJson = await response.json();
            
            // Update metadata display
            document.getElementById('style-name').innerText = `${styleJson.metadata.name || 'Non défini'}`;
            document.getElementById('style-version').innerText = `Version: ${styleJson.metadata.version || 'Non définie'}`;
            document.getElementById('style-owner').innerText = `Description: ${styleJson.metadata.description || 'Non défini'}`;
            document.getElementById('style-url').href = `${styleJson.metadata.url || 'Non défini'}`;
        } catch (error) {
            console.error('Erreur lors du chargement des métadonnées:', error);
        }
    } #}

    // Display metadata when map loads initially
    {# map.on('load', () => {
        updateZoomLevel();
        // displayStyleMetadata(styleSelector.value);
        displayStyleMetadata("https://betagouv.github.io/styles-de-cartes/maps/map_simplified_ign.json");
    }); #}

    // Update metadata when style changes
    {# styleSelector.addEventListener('change', function () {
        const selectedStyle = styleSelector.value;
        map.setStyle(selectedStyle);
        displayStyleMetadata(selectedStyle);
    }); #}

    // Logic for open and close the side panel
    const controlPanel = document.getElementById('map-selection');
    const closeButton = controlPanel.querySelector('.fr-btn--close');
    const openButton = document.getElementById('open-panel-btn');

    function togglePanel(isOpen) {
        controlPanel.setAttribute('aria-expanded', isOpen);
        openButton.setAttribute('aria-expanded', !isOpen);
    }

    closeButton.addEventListener('click', () => togglePanel(false));
    openButton.addEventListener('click', () => togglePanel(true));

    // Add click handlers for style switching
    document.querySelectorAll('.map-card').forEach(card => {
        card.addEventListener('click', () => {
            const styleUrl = card.dataset.styleUrl;
            map.setStyle(styleUrl);
            
            // Update badges
            document.querySelectorAll('.fr-badge--success').forEach(badge => badge.remove());
            const badgeGroup = card.querySelector('.fr-badges-group');
            const newBadge = document.createElement('p');
            newBadge.className = 'fr-badge fr-badge--sm fr-badge--success';
            newBadge.textContent = 'Affichée actuellement';
            badgeGroup.querySelector('li').appendChild(newBadge);
        });
    });
</script>